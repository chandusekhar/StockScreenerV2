// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using StockDatabase;
using System;

namespace screener.Migrations
{
    [DbContext(typeof(StockDataContext))]
    partial class StockDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("StockDatabase.CircuitBreaker", b =>
                {
                    b.Property<string>("nseSymbol");

                    b.Property<DateTime>("date");

                    b.Property<string>("series");

                    b.Property<char>("high_low");

                    b.HasKey("nseSymbol", "date", "series", "high_low");

                    b.HasIndex("date");

                    b.HasIndex("nseSymbol");

                    b.ToTable("circuitBreaker");
                });

            modelBuilder.Entity("StockDatabase.CompanyInformation", b =>
                {
                    b.Property<string>("series");

                    b.Property<string>("isinNumber");

                    b.Property<string>("symbol");

                    b.Property<string>("companyName")
                        .IsRequired();

                    b.Property<DateTime>("dateOfListing");

                    b.Property<decimal>("faceValue");

                    b.Property<string>("industry");

                    b.Property<int>("marketLot");

                    b.Property<decimal>("paidUpvalue");

                    b.HasKey("series", "isinNumber", "symbol");

                    b.HasIndex("symbol", "isinNumber", "series");

                    b.ToTable("companyInformation");
                });

            modelBuilder.Entity("StockDatabase.DailyStockData", b =>
                {
                    b.Property<string>("isinNumber");

                    b.Property<DateTime>("date");

                    b.Property<string>("series");

                    b.Property<decimal>("close");

                    b.Property<long>("deliverableQty");

                    b.Property<decimal>("deliveryPercentage");

                    b.Property<decimal>("high");

                    b.Property<decimal>("lastPrice");

                    b.Property<decimal>("low");

                    b.Property<decimal>("open");

                    b.Property<decimal>("prevClose");

                    b.Property<string>("symbol")
                        .IsRequired();

                    b.Property<long>("totalTradedQty");

                    b.Property<decimal>("totalTradedValue");

                    b.Property<long>("totalTrades");

                    b.HasKey("isinNumber", "date", "series");

                    b.HasIndex("date");

                    b.HasIndex("symbol", "series");

                    b.ToTable("stockData");
                });

            modelBuilder.Entity("StockDatabase.PortfolioInformation", b =>
                {
                    b.Property<string>("isinNumber");

                    b.Property<string>("series");

                    b.Property<string>("symbol");

                    b.Property<DateTime>("buyDate");

                    b.Property<decimal>("buyPrice");

                    b.Property<string>("notes");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("isinNumber", "series", "symbol");

                    b.HasIndex("isinNumber", "series", "symbol");

                    b.ToTable("portfolioInformation");
                });

            modelBuilder.Entity("StockDatabase.SectorInformation", b =>
                {
                    b.Property<DateTime>("date");

                    b.Property<string>("industry");

                    b.Property<decimal>("change");

                    b.HasKey("date", "industry");

                    b.HasIndex("date");

                    b.HasIndex("industry");

                    b.ToTable("sectorInformation");
                });

            modelBuilder.Entity("StockDatabase.StockMonthlyStats", b =>
                {
                    b.Property<string>("symbol");

                    b.Property<int>("year");

                    b.Property<string>("InternalData")
                        .IsRequired();

                    b.HasKey("symbol", "year");

                    b.HasIndex("symbol");

                    b.HasIndex("year");

                    b.ToTable("monthlyStockStats");
                });

            modelBuilder.Entity("StockDatabase.WatchList", b =>
                {
                    b.Property<string>("isinNumber");

                    b.Property<string>("series");

                    b.Property<string>("symbol");

                    b.Property<string>("notes");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("isinNumber", "series", "symbol");

                    b.HasIndex("isinNumber", "series", "symbol");

                    b.ToTable("watchList");
                });
#pragma warning restore 612, 618
        }
    }
}
